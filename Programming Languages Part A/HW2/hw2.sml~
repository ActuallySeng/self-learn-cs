(* Dan Grossman, Coursera PL, HW2 Provided Code *)

(* if you use this function to compare two strings (returns true if the same
   string), then you avoid several of the functions in problem 1 having
   polymorphic types that may be confusing *)
fun same_string(s1 : string, s2 : string) =
    s1 = s2

(* put your solutions for problem 1 here *)

	     
fun all_except_option (str, strs) =
    let fun helper(xs, currentlist, status) =
	    case xs of
		[] => (currentlist, status)
	      | x::xs'  => if same_string(x, str)
			   then helper(xs', currentlist, true)
			   else helper(xs',  x::currentlist, status)
	val (result, status) = helper(strs, [], false)
    in if status = true then SOME (rev result) else NONE
    end

(* String list  list * String -> String list  *) 
fun get_substitutions1(los, str) =
    case los of
	[] => []
      | first::rest =>
	case  all_except_option(str, first) of
	    NONE => get_substitutions1(rest, str)
	  | SOME x => x @ get_substitutions1(rest, str);

fun get_substitutions2(los, str) =
    let fun helper(los_2, rsf) =
            case los_2 of
		[] => rsf
	      | first::rest =>
		case  all_except_option(str, first) of
		    NONE => helper(rest, rsf)
		  | SOME x => helper(rest, rsf @ x)
    in helper(los, [])
    end

(* String list list * Name -> Name list *)
fun similar_names(subs, name) =
    let
	val {first=fst, middle=mid, last=lst} = name;
	val subs_result = get_substitutions1(subs, fst);

	fun replace_helper(lof) =
	    case lof of
		[] => []
	      | first::rest => {first=first, middle=mid, last=lst}::replace_helper(rest)
    in name::replace_helper(subs_result)
    end;
	   



					    

(* you may assume that Num is always used with values 2, 3, ..., 10
   though it will not really come up *)
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Jack | Queen | King | Ace | Num of int 
type card = suit * rank

datatype color = Red | Black
datatype move = Discard of card | Draw 

exception IllegalMove

(* put your solutions for problem 2 here *)

fun card_color(c) =
    case c of
	(s, r) => if s = Spades orelse s = Clubs
		  then Black
		  else Red;


		       
